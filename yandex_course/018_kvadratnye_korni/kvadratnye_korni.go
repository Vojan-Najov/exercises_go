// Гоша работает на проектом, в котором приходится часто решать квадратные
// уравнения. Он мог бы и сам написать функцию для нахождения корней, но
// сильно занят планированием работы. Помогите Гоше и напишите функцию
// SqRoots() для вычисления корней квадратного уравнения.
//
// Внутри функции с клавиатуры через пробел вводятся три вещественных числа,
// при этом первое число гарантированно не равно нулю. Функция должна
// вывести на экран через пробел по возрастанию корни уравнения (один или
// два), или два числа 0, если корней нет.
//
// Функция ничего не должна возвращать
// Шаблон вашего решения:
// package main
// import (
//    "fmt"
//    "math"
// )
//
// func SqRoots() {
//    var a, b, c float64
//    fmt.Scanln(&a, &b, &c)
//    ...
// }
// Самостоятельно определять функцию main() и вызывать функцию SqRoots() не
// требуется – это сделает проверяющая система.
//
// То есть вы можете сначала написать в среде разработки работающую
// программу, затем скопировать код, удалить функцию main() и отправить
// решение на проверку.
//
// В следующих задачах формат ответа аналогичный.
// Формат ввода
// Три вещественных числа через пробел
//
// Формат вывода
// Вещественные числа через пробел
//
// Пример 1
// Ввод 	    Вывод
// 1 -3 2     1.000 2.000
// Пример 2
// Ввод 	    Вывод
// 1 4 4.0    -2.000
// Пример 3
// Ввод 	    Вывод
// 1 1 1      0 0

package main

import (
  "fmt"
  "math"
)

func Discriminant(a, b, c float64) float64 {
  return b * b - 4 * a * c
}

func SqRoots() {
  var a, b, c float64
  if _, err := fmt.Scanln(&a, &b, &c); err != nil || a == 0.0 {
    fmt.Println("Некорректный ввод")
    return
  }

  d := Discriminant(a, b, c)
  if (d < 0.0) {
    fmt.Println(0, 0)
    return
  }

  x1 := (-b + math.Sqrt(d)) / (2.0 * a)
  x2 := (-b - math.Sqrt(d)) / (2.0 * a)
  if (x1 > x2) {
    x1, x2 = x2, x1
  }

  if (x1 == x2) {
    fmt.Printf("%f\n", x1)
  } else {
    fmt.Printf("%f %f\n", x1, x2)
  }
}

func main() {
  for {
    SqRoots()
  }
}
